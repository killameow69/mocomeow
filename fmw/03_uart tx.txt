ALGORITM:

STEP 1: Creat a Multiple files name as main.c , uart.c, uart.h
STEP 2: In main file to include the uart.h file then call the function from the uart.c
STEP 3: In uart.c to declare the sum function
STEP 4:  Define Registers and bitfield constent
STEP 5: Define system frequency (SYS_FREQ), APB1 clock frequency (APB1_CLK), and  UART baud rate (UART_BAUDRATE).
STEP 6: Define a delay function which is used for introducing delays in milliseconds
STEP 7:  Enable clock access to the GPIO port
•	Configure the GPIO pin (PA2) for alternate function mode
•	Enable clock access to the USART2 peripheral (APB1EN).
•	Configure the baud rate by calling uart_set_baudrate.
•	Configure the transfer direction (transmit only in this case) by setting USART2->CR1 register.
•	Enable the USART2 module.
STEP 8: Define bard rate configiration and Computation
STEP 9: UART Data tarnsmision function
•	Wait until the transmit data register (USART2->DR) is empty (SR_TXE flag).
•	Write the data to be transmitted (ch) to the transmit data register.


PROGRAM:

uart.c


#include "uart.h"

#define GPIOAEN     (1U<<0)
#define PA2MOD      (2U<<4)
#define PA2AF       (7U<<8)
#define APB1EN      (1U<<17)
#define USART2_TX   (1U<<3)
#define USART2EN    (1U<<13)
#define SR_TXE      (1U<<7)


#define SYS_FREQ        16000000
#define APB1_CLK        SYS_FREQ
#define UART_BAUDRATE   115200



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);



void delayMs(int n)
{
    for (; n > 0; n--)
        for (int i = 0; i < 5000; i++);

}

void uart2_init(void)
{
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;

    // Set PA2 mode to alternate function mode
    GPIOA->MODER |= PA2MOD;
    // Set PA2 alternate function type to UART_TX (AF07)
    GPIOA->AFR[0] |= PA2AF;

    // Enable clock access to USART2
    RCC->APB1ENR |= APB1EN;

    // Configure baudrate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);

    // Configure the transfer direction
    USART2->CR1 = USART2_TX;

    // Enable USART2 module
    USART2->CR1 |= USART2EN;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
}

void uart2_write(int ch)
{
    // Make sure the transmit data register is empty
    while(!(USART2->SR & SR_TXE));

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
}

uart.h

#ifndef INC_UART_H_
#define INC_UART_H_

#include <stdint.h>

#include "stm32f4xx.h"

void uart2_init(void);
void uart2_write(int ch);
void delayMs(int n);

#endif /* INC_UART_H_ */

main.c

#include "stm32f4xx.h"
#include <stdint.h>
#include "uart.h"

int main()
{
    uart2_init();
    while(1)
    {
        char name[] = "Transmited\n\r";
        for(int i = 0; name[i] != '\0'; i++)
            uart2_write(name[i]);
        delayMs(50);
    }
    return 0;
}









