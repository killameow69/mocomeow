ALGORITHM:
STEP 1: Start the process.
STEP 2: Include standard C libraries like stdio.h, stdlib.h, i2c.h, delay.h, LiquidCrystal_PCF8574.h, and main.h.
STEP 3: Initialize necessary hardware peripherals (such as I2C and SysTick) and global variables.
STEP 4:Configure I2C parameters such as clock speed and rise time.
STEP 5: Configure display settings (function set, display on/off control, entry mode set)
STEP 6: Define utility functions for controlling the LCD display via I2C
STEP 7: Implement delay functions for timing operations
STEP 8: Initialize hardware peripherals and the LCD display
STEP 9: Utilize delays to control timing of operations.
STEP 10:Stop the process and display it in LCD.

PROGRAM:
delay.h:
#ifndef __delay__H__
#define __delay__H__
#include <stdint.h>
uint32_t millis(void);
void systick_init_ms(uint32_t freq);
void delay(uint32_t ms);
#endif

delay.c:
#include "delay.h"
#include "stm32f4xx.h"                  // Device header
volatile uint32_t ms,rms;
void systick_init_ms(uint32_t freq)
	{
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
	SysTick->VAL=0;
	SysTick->CTRL=7; //0b00000111;
	__enable_irq();	
}
uint32_t millis(void)
	{
	__disable_irq();
	rms=ms; //store current ms in rms
	__enable_irq();
	return rms;
	}
void SysTick_Handler(void){
//GPIOA->ODR^=GPIO_ODR_OD5;
ms++;
}
void delay(uint32_t ms)
	{
	uint32_t start=millis();
	do{;}while(millis()-start<ms);
	}

i2c.h:
#ifndef __i2c_H
#define __i2c_H
#include "delay.h"
#include <stdint.h>
void i2c_init(void);
int8_t i2c_readByte(uint8_t saddr,uint8_t maddr,uint8_t *data);
int8_t i2c_writeByte(uint8_t saddr,uint8_t maddr,uint8_t data);
int8_t i2c_WriteMulti(uint8_t saddr,uint8_t maddr,uint8_t *buffer, uint8_t length);
int8_t i2c_ReadMulti(uint8_t saddr,uint8_t maddr, uint8_t n, uint8_t* data);
void i2c_bus_scan(void);
#endif

i2c.c:
#include "i2c.h"
#include "stm32f4xx.h"                  // Device header
#include "stdio.h"
void i2c_init(void){
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;		 //enable gpiob clock
RCC->APB1ENR|=RCC_APB1ENR_I2C1EN; 		//enable i2c1 clock
GPIOB->MODER|=0xA0000;				 //set pb8and9 to alternative function
GPIOB->AFR[1]|=0x44;
GPIOB->OTYPER|=GPIO_OTYPER_OT8|GPIO_OTYPER_OT9; //set pb8 and pb9 as open drain
I2C1->CR1=0x8000;
I2C1->CR1&=~0x8000;
I2C1->CR2|=0x10;
I2C1->CCR=80; 	//standard 100KHz
I2C1->TRISE=17;
I2C1->CR1|=0x1;
	
}
int8_t i2c_readByte(uint8_t saddr,uint8_t maddr, uint8_t *data)
{
uint64_t start=millis();
volatile int tmp=0;
while(I2C1->SR2&I2C_SR2_BUSY)
{
if(millis()-start>500)
{
return -1;
}
}
I2C1->CR1|=I2C_CR1_START;
start=millis();
while(!(I2C1->SR1&I2C_SR1_SB))
{
if(millis()-start>500)
{
return -1;
}
}
I2C1->DR=saddr<<1;
while(!(I2C1->SR1&I2C_SR1_ADDR))
{
if(millis()-start>500)
{
return -1;
}
}
tmp=I2C1->SR2;
while(!(I2C1->SR1&I2C_SR1_TXE))
{
if(millis()-start>500)
{
return -1;
}
}
I2C1->DR=maddr;
while(!(I2C1->SR1&I2C_SR1_TXE))
{
if(millis()-start>500)
{
return -1;
}
}
I2C1->CR1|=I2C_CR1_START;
while(!(I2C1->SR1&I2C_SR1_SB))
{
if(millis()-start>500)
{
return -1;
}
}	
I2C1->DR=saddr<<1|1;
while(!(I2C1->SR1&I2C_SR1_ADDR))
{
if(millis()-start>500)
{
return -1;
}
}
I2C1->CR1&=~I2C_CR1_ACK;
tmp =I2C1->SR2;
I2C1->CR1|=I2C_CR1_STOP;
while(!(I2C1->SR1&I2C_SR1_RXNE))
{
if(millis()-start>500)
{
return -1;
}
}
*data++=I2C1->DR;
return 0;
}
int8_t i2c_writeByte(uint8_t saddr,uint8_t maddr,uint8_t data)
{
uint64_t start=millis();
volatile int Temp=0;
while(I2C1->SR2&I2C_SR2_BUSY)
{
if(millis()-start>500)
{
return -1;
}
}          /*wait until bus not busy*/
I2C1->CR1|=I2C_CR1_START;                 /*generate start*/
while(!(I2C1->SR1&I2C_SR1_SB)){if(millis()-start>500){return -1;}}         /*wait until start bit is set*/
I2C1->DR = saddr<< 1;                 	 /* Send slave address*/
while(!(I2C1->SR1&I2C_SR1_ADDR)){if(millis()-start>500){return -1;}}      /*wait until address flag is set*/
Temp = I2C1->SR2; 											 /*clear SR2 by reading it */
while(!(I2C1->SR1&I2C_SR1_TXE)){if(millis()-start>500){return -1;}}       /*Wait until Data register empty*/
I2C1->DR = maddr;                        /* send memory address*/
while(!(I2C1->SR1&I2C_SR1_TXE)){if(millis()-start>500){return -1;}}       /*wait until data register empty*/
I2C1->DR = data; 	
while (!(I2C1->SR1 & I2C_SR1_BTF)){if(millis()-start>500){return -1;}}     /*wait until transfer finished*/
I2C1->CR1 |=I2C_CR1_STOP;								 /*Generate Stop*/	
return 0;
}
int8_t i2c_WriteMulti(uint8_t saddr,uint8_t maddr,uint8_t *buffer, uint8_t length){
uint64_t start=millis();
while (I2C1->SR2 & I2C_SR2_BUSY){if(millis()-start>500){return -1;}}           //wait until bus not busy
I2C1->CR1 |= I2C_CR1_START;                   //generate start
while (!(I2C1->SR1 & I2C_SR1_SB)){if(millis()-start>500){return -1;}}					//wait until start is generated
volatile int Temp=0;
I2C1->DR = saddr<< 1;                 	 			// Send slave address
while (!(I2C1->SR1 & I2C_SR1_ADDR)){if(millis()-start>500){return -1;}}        //wait until address flag is set
Temp = I2C1->SR2; 						      //Clear SR2
while (!(I2C1->SR1 & I2C_SR1_TXE)){if(millis()-start>500){return -1;}}           //Wait until Data register empty
I2C1->DR = maddr;                      				// send memory address
while (!(I2C1->SR1 & I2C_SR1_TXE)){if(millis()-start>500){return -1;}}           //wait until data register empty
//sending the data
for (uint8_t i=0;i<length;i++)
 { 
 I2C1->DR=buffer[i]; 													//filling buffer with command or data
	while (!(I2C1->SR1 & I2C_SR1_BTF)){if(millis()-start>500){return -1;}}
 }	
                             
I2C1->CR1 |= I2C_CR1_STOP;	//wait until transfer finished
return 0;
}
int8_t i2c_ReadMulti(uint8_t saddr,uint8_t maddr, uint8_t n, uint8_t* data)
{
	uint64_t start=millis();
	volatile int temp=0;
	while (I2C1->SR2 & I2C_SR2_BUSY){if(millis()-start>500){return -1;}}
	I2C1->CR1|=I2C_CR1_START;
	while(!(I2C1->SR1 & I2C_SR1_SB)){if(millis()-start>500){return -1;}}
	I2C1->DR=saddr<<1;
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){if(millis()-start>500){return -1;}}
	temp=I2C1->SR2;
	while(!(I2C1->SR1&I2C_SR1_TXE)){if(millis()-start>500){return -1;}}
	I2C1->DR = maddr;
	while(!(I2C1->SR1&I2C_SR1_TXE)){if(millis()-start>500){return -1;}}
	I2C1->CR1|=I2C_CR1_START;
	while(!(I2C1->SR1 & I2C_SR1_SB)){if(millis()-start>500){return -1;}}
	I2C1->DR=saddr<<1|1;
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){if(millis()-start>500){return -1;}}
	temp=I2C1->SR2;
	I2C1->CR1|=I2C_CR1_ACK;
	while(n>0U)
		{
		if(n==1U)
				{
				I2C1->CR1&=~I2C_CR1_ACK;
					I2C1->CR1|=I2C_CR1_STOP;
					while(!(I2C1->SR1&I2C_SR1_RXNE)){if(millis()-start>500){return -1;}}
					*data++=I2C1->DR;
						break;
				}
			else
					{
					
					while(!(I2C1->SR1&I2C_SR1_RXNE)){if(millis()-start>500){return -1;}}
						(*data++)=I2C1->DR;
							n--;
					
					}	
				
			
		}	
	return 0;	
}
void i2c_bus_scan(void)
{        
		int a=0; //address variable
         for (uint8_t i=0;i<128;i++) //go through all 127 address
   {
			uint32_t start=millis();
            I2C1->CR1 |= I2C_CR1_START; //generate start 
            while(!(I2C1->SR1 & I2C_SR1_SB)){
            if(millis()-start>100){printf("bus error\r\n"); return;}} // wait to start to be generated
            I2C1->DR=(i<<1|0); // transmit the address
            while(!(I2C1->SR1)|!(I2C1->SR2)){}; //clear status register
            I2C1->CR1 |= I2C_CR1_STOP; //generate stop condition
						//printf("stop generated \r\n");
           delay(100);//minium wait time is 40 uS, but for sure, leave it 100 uS
						for (volatile int i=0;i<1000;i++){;}
            a=(I2C1->SR1&I2C_SR1_ADDR); //read the status register address set
            if (a==2)//if the address is valid
         {
					 //print the address
					// printf("Found I2C device at adress 0x%X (hexadecimal), or %d (decimal)\r\n",i,i);
           //UART_Write_String(data);
         }
     }
}

LiquidCrystal_PCF8574.h:
#ifndef __LiquidCrystal_PCF8574__h
#define __LiquidCrystal_PCF8574__h
void lcd_init (void);
void lcd_send_string (char *str);
void setCursor(int a, int b);
void lcd_clear (void);
#endif

LiquidCrystal_PCF8574.c:
#include "LiquidCrystal_PCF8574.h"
#include "stdint.h"
#include "i2c.h"
#include "stm32f4xx.h"
extern void delay(uint32_t ms);
#define SLAVE_ADDRESS_LCD (0x27) // change this according to ur setup
void lcd_write_i2c(char saddr,uint8_t *buffer, uint8_t length)
{
while (I2C1->SR2 & I2C_SR2_BUSY);           //wait until bus not busy
I2C1->CR1 |= I2C_CR1_START;                   //generate start
while (!(I2C1->SR1 & I2C_SR1_SB)){;}					//wait until start is generated
volatile int Temp;
I2C1->DR = saddr<< 1;                 	 			// Send slave address
while (!(I2C1->SR1 & I2C_SR1_ADDR)){;}        //wait until address flag is set
Temp = I2C1->SR2; 														//Clear SR2
//sending the data
for (uint8_t i=0;i<length;i++)
 {
 I2C1->DR=buffer[i]; 													//filling buffer with command or data
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 }
I2C1->CR1 |= I2C_CR1_STOP;										//wait until transfer finished
}
void lcd_send_cmd (char cmd)
{
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
}
void lcd_send_data (char data)
{
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	lcd_write_i2c(SLAVE_ADDRESS_LCD,(uint8_t *)data_t,4);
}
void setCursor(int a, int b)
{
	int i=0;
	switch(b){
	case 0:lcd_send_cmd(0x80);break;
	case 1:lcd_send_cmd(0xC0);break;
	case 2:lcd_send_cmd(0x94);break;
	case 3:lcd_send_cmd(0xd4);break;}
	for(i=0;i<a;i++)
	lcd_send_cmd(0x14);
}
void lcd_send_string (char *str)
{
	while (*str) lcd_send_data (*str++);
}
void lcd_init (void)
{
	i2c_init();
	// 4 bit initialisation
	delay(50);  // wait for >40ms
	lcd_send_cmd (0x3);
	delay(5);  // wait for >4.1ms
	lcd_send_cmd (0x3);
	delay(1);  // wait for >100us
	lcd_send_cmd (0x3);
	delay(10);
	lcd_send_cmd (0x2);  // 4bit mode
	delay(10);
  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	delay(1);
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	delay(1);
	lcd_send_cmd (0x01);  // clear display
	delay(1);
	delay(1);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
void lcd_clear (void)
{
	#define LCD_CLEARDISPLAY 0x01
	lcd_send_cmd(LCD_CLEARDISPLAY);
	delay(100);
	
}

Main.c
#include "LiquidCrystal_PCF8574.h"
//#include "delay.h"
#include "stdio.h"
//#include "RFID.h"
extern void SysClockConfig(void);
#include"delay.h"
uint8_t rfid_id[4];
int main(void)
{
	//SysClockConfig();
	systick_init_ms(16000000);
	//rc522_init();
	lcd_init();
	setCursor(0,0);
	lcd_send_string("GAUTHAM");
	setCursor(4,1);
	lcd_send_string("RTC2023MCA001");
	delay(2000);
	lcd_clear();
	while(1)
	{
		//if(rc522_checkCard(rfid_id))
		{
			lcd_clear();
			char data[20];
			setCursor(0,0);
			lcd_send_string("GAUTHAM M");
			setCursor(0,1);
	//sprintf(data,"0x%x0x%x0x%x0x%x",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
			lcd_send_string("FROM RTC");
			delay(1000);	
		}
			//delay(100);
	}
}

OUTPUT:
